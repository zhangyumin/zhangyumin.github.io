---
layout: post
title: Java学习记录
category: java
date: 2015-07-22
---
##2015年6月5日(第一章)
1.面向对象相对于面向过程编程更简单,可以增加代码的复用,面向对象并没有减少实现过程,只是将过程包装成了方法.

2.构造方法的重载在于可以为其输入变量,不同种变量可以用不同的方法重载.

		Circle c1 = new Circle(5);//最后的Circle即为构造方法
	
3.this是一个对象,可以在类里面引用类的成员变量和方法.

4.static关键字,可以允许变量不实例化修改,只存一份,每个对象的static变量都相同,节约空间.
<!-- more -->

##2015年6月8日
1.package的作用是防止java类重名,导致调用出错.约定俗成的规则是域名倒写(如com.baidu.www)

##2015年7月21日
1.不同的项目需要不同的classpath,以避免包的冲突问题.

2.使用jar -cvf *.jar *.*可以打包class文件,便于引用.

3.java只支持单继承(C++允许多继承).

4.继承的子类大于等于父类(子类含有父类方法等).

5.继承所有的变量,但是不能修改只能访问.(protected,public)
	
	-------------------------------------------------
	|   修饰符  | 类内部 | 同一个包 | 子类 | 任何地方 |
	-------------------------------------------------
	|  private  |  Yes  |          |      |         |
	-------------------------------------------------
	|  default  |  Yes  |    Yes   |      |         |
	-------------------------------------------------
	| protected |  Yes  |    Yes   |  Yes |         |
	-------------------------------------------------
	|   public  |  Yes  |    Yes   |  Yes |   Yes   |
	-------------------------------------------------

6.super引用指向当前对象的父类,this引用指向对象自身.

7.子类构造过程中必须调用父类的构造方法.super的调用必须是构造函数的第一个语句.

##2015年7月22日
1.lang中的equals当且仅当指向同一对象,才返回true.但是各个包可能会重写equals.

2.动态绑定(多态)是面向对象的核心,执行期间判断所引用对象的实际类型,根据其实际类型调用其相应的方法.

3.抽象方法用于被重写,方法是抽象的则类也是抽象的,无法被实例化,用于继承.

4.final关键字,不能重写,不能继承.

5.interface属于特殊的抽象类,只包含常量和方法的定义,无实现.接口之间可以相互继承.

##2015年7月23日
1.多维数组相当于其低维数组的数组.

